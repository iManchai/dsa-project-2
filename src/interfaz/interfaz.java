/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.io.*;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import edd.*;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author manch
 */
public class interfaz extends javax.swing.JFrame implements Runnable{
    
    /**
     * Atributos del Reloj
     * @field hour : horas del día
     * @field minute : minutos del día
     * @field second : segundos del día
     * @field lista de usuarios
     * @field monticulo binario
     */
    int hour,minute,second;
    public LinkedList<User> listOfUsers = new LinkedList();
    public MinBinaryHeap heap = new MinBinaryHeap(25);
    public HashTable hashTable = new HashTable();
    public LinkedList<Document> docListSended;
    
    /**
     * Creates new form interfaz
     */
    public interfaz() {
        initComponents(); 
        /**
         * Creando
         */
        Thread t = new Thread(this);
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Titulo = new javax.swing.JLabel();
        horas24 = new javax.swing.JLabel();
        Proyect = new javax.swing.JLabel();
        College = new javax.swing.JLabel();
        Names = new javax.swing.JLabel();
        CargarArchivo = new javax.swing.JButton();
        Tabs = new javax.swing.JTabbedPane();
        TabAñadirUser = new javax.swing.JPanel();
        Prioridades = new javax.swing.JComboBox<>();
        Prioridad = new javax.swing.JLabel();
        AñadirNombreUser = new javax.swing.JTextField();
        NombreUser1 = new javax.swing.JLabel();
        Ejemplo1 = new javax.swing.JLabel();
        AñadirUser = new javax.swing.JButton();
        TabAñadirDoc = new javax.swing.JPanel();
        Users = new javax.swing.JLabel();
        NombreUser = new javax.swing.JLabel();
        Ejemplo = new javax.swing.JLabel();
        TipoDoc = new javax.swing.JLabel();
        AñadirNombreDoc = new javax.swing.JTextField();
        TiposdeDoc = new javax.swing.JComboBox<>();
        AñadirDoc = new javax.swing.JButton();
        PaginasDoc = new javax.swing.JLabel();
        Tamaño = new javax.swing.JTextField();
        Ejemplo2 = new javax.swing.JLabel();
        UserList2 = new javax.swing.JComboBox<>();
        TabEliminar = new javax.swing.JPanel();
        DocList = new javax.swing.JComboBox<>();
        BorrarUser = new javax.swing.JButton();
        UserList = new javax.swing.JComboBox<>();
        BorrarDoc = new javax.swing.JButton();
        UserList1 = new javax.swing.JComboBox<>();
        Ejemplo3 = new javax.swing.JLabel();
        Ejemplo4 = new javax.swing.JLabel();
        Ejemplo5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        TabVer = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaCola = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        Cola = new javax.swing.JPanel();
        BotonImprimir = new javax.swing.JButton();
        Buscar = new javax.swing.JLabel();
        DocList1 = new javax.swing.JComboBox<>();
        Buscar1 = new javax.swing.JLabel();
        TituloElimimar = new javax.swing.JLabel();
        TituloElimimar1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        BorrarDocCola = new javax.swing.JButton();
        BuscarUser = new javax.swing.JTextField();
        BuscarUserButton = new javax.swing.JButton();
        ManejarCola = new javax.swing.JPanel();
        UserList4 = new javax.swing.JComboBox<>();
        Buscar2 = new javax.swing.JLabel();
        DocList2 = new javax.swing.JComboBox<>();
        Buscar3 = new javax.swing.JLabel();
        Mandar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Titulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titulo.setText("Reloj");

        horas24.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        horas24.setForeground(new java.awt.Color(255, 51, 51));
        horas24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        Proyect.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Proyect.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Proyect.setText("PROYECTO 2 - ESTRUCTURA DE DATOS");

        College.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        College.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        College.setText("UNIVERSIDAD METROPOLITANA");

        Names.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Names.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Names.setText("Elias Fung - Darío Fernández - Emiliana Plaz");

        CargarArchivo.setText("Cargar Archivo");
        CargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarArchivoActionPerformed(evt);
            }
        });

        Prioridades.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "prioridad_alta", "prioridad_media", "prioridad_baja" }));
        Prioridades.setToolTipText("");

        Prioridad.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Prioridad.setText("Prioridad");

        NombreUser1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NombreUser1.setText("Nombre del Usuario");

        Ejemplo1.setText("Ejemplo: Xx_Destroyer_xX");

        AñadirUser.setText("Añadir");
        AñadirUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AñadirUserMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout TabAñadirUserLayout = new javax.swing.GroupLayout(TabAñadirUser);
        TabAñadirUser.setLayout(TabAñadirUserLayout);
        TabAñadirUserLayout.setHorizontalGroup(
            TabAñadirUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabAñadirUserLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(TabAñadirUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Prioridad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NombreUser1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabAñadirUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TabAñadirUserLayout.createSequentialGroup()
                        .addComponent(AñadirNombreUser, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Ejemplo1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(TabAñadirUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(AñadirUser)
                        .addComponent(Prioridades, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(153, 153, 153))
        );
        TabAñadirUserLayout.setVerticalGroup(
            TabAñadirUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabAñadirUserLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(TabAñadirUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AñadirNombreUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NombreUser1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ejemplo1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabAñadirUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Prioridad, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Prioridades, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(AñadirUser)
                .addContainerGap(148, Short.MAX_VALUE))
        );

        Tabs.addTab("Añadir User", TabAñadirUser);

        Users.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Users.setText("Users");

        NombreUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NombreUser.setText("Nombre del Documento");

        Ejemplo.setText("Ejemplo: Tabla de Tipos Pokemón");

        TipoDoc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TipoDoc.setText("Tipo de Documento");

        TiposdeDoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Word", "Excel", "PowerPoint", "PDF", "Imagen" }));
        TiposdeDoc.setToolTipText("");

        AñadirDoc.setText("Añadir");
        AñadirDoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AñadirDocMouseClicked(evt);
            }
        });

        PaginasDoc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PaginasDoc.setText("Numero de paginas");

        Ejemplo2.setText("Numero de paginas: 35");

        UserList2.setToolTipText("");
        UserList2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                UserList2FocusGained(evt);
            }
        });

        javax.swing.GroupLayout TabAñadirDocLayout = new javax.swing.GroupLayout(TabAñadirDoc);
        TabAñadirDoc.setLayout(TabAñadirDocLayout);
        TabAñadirDocLayout.setHorizontalGroup(
            TabAñadirDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabAñadirDocLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(TabAñadirDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TipoDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NombreUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Users, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PaginasDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabAñadirDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TabAñadirDocLayout.createSequentialGroup()
                        .addComponent(AñadirNombreDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Ejemplo, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TiposdeDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(TabAñadirDocLayout.createSequentialGroup()
                        .addGroup(TabAñadirDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AñadirDoc)
                            .addComponent(Tamaño, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(Ejemplo2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(UserList2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        TabAñadirDocLayout.setVerticalGroup(
            TabAñadirDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabAñadirDocLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(TabAñadirDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Users, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserList2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabAñadirDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NombreUser, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ejemplo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AñadirNombreDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabAñadirDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TipoDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TiposdeDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabAñadirDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PaginasDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Tamaño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ejemplo2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(AñadirDoc)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        Tabs.addTab("Añadir Documento", TabAñadirDoc);

        DocList.setToolTipText("");
        DocList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                DocListFocusGained(evt);
            }
        });

        BorrarUser.setText("Borrar User");
        BorrarUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BorrarUserMouseClicked(evt);
            }
        });

        UserList.setToolTipText("");
        UserList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                UserListFocusGained(evt);
            }
        });

        BorrarDoc.setText("Borrar Documento");
        BorrarDoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BorrarDocMouseClicked(evt);
            }
        });

        UserList1.setToolTipText("");
        UserList1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                UserList1FocusGained(evt);
            }
        });

        Ejemplo3.setText("Lista de Usuarios");

        Ejemplo4.setText("Lista de Documentos");

        Ejemplo5.setText("Lista de Usuarios");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout TabEliminarLayout = new javax.swing.GroupLayout(TabEliminar);
        TabEliminar.setLayout(TabEliminarLayout);
        TabEliminarLayout.setHorizontalGroup(
            TabEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TabEliminarLayout.createSequentialGroup()
                .addGroup(TabEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TabEliminarLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(Ejemplo5, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(UserList1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TabEliminarLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BorrarUser)
                        .addGap(72, 72, 72)))
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addGroup(TabEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(TabEliminarLayout.createSequentialGroup()
                        .addGroup(TabEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BorrarDoc, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(UserList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(Ejemplo3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(TabEliminarLayout.createSequentialGroup()
                        .addComponent(DocList, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Ejemplo4, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );
        TabEliminarLayout.setVerticalGroup(
            TabEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabEliminarLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(TabEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserList1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ejemplo3)
                    .addComponent(Ejemplo5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TabEliminarLayout.createSequentialGroup()
                        .addGroup(TabEliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DocList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Ejemplo4))
                        .addGap(18, 18, 18)
                        .addComponent(BorrarDoc))
                    .addComponent(BorrarUser))
                .addContainerGap(138, Short.MAX_VALUE))
            .addGroup(TabEliminarLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jSeparator2)
                .addContainerGap())
        );

        Tabs.addTab("Eliminar", TabEliminar);

        TablaCola.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tipo", "Tiempo en cola", "Tamaño"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaCola.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(TablaCola);
        if (TablaCola.getColumnModel().getColumnCount() > 0) {
            TablaCola.getColumnModel().getColumn(0).setResizable(false);
            TablaCola.getColumnModel().getColumn(1).setResizable(false);
            TablaCola.getColumnModel().getColumn(2).setResizable(false);
            TablaCola.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setText("Formato cola");

        javax.swing.GroupLayout TabVerLayout = new javax.swing.GroupLayout(TabVer);
        TabVer.setLayout(TabVerLayout);
        TabVerLayout.setHorizontalGroup(
            TabVerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabVerLayout.createSequentialGroup()
                .addGroup(TabVerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TabVerLayout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(jLabel1))
                    .addGroup(TabVerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(317, Short.MAX_VALUE))
        );
        TabVerLayout.setVerticalGroup(
            TabVerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabVerLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        Tabs.addTab("Ver Cola", TabVer);

        BotonImprimir.setText("Imprimir");
        BotonImprimir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonImprimirMouseClicked(evt);
            }
        });

        Buscar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Buscar.setText("Buscar Usuario");

        DocList1.setToolTipText("");
        DocList1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                DocList1FocusGained(evt);
            }
        });

        Buscar1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Buscar1.setText("Documento en Cola");

        TituloElimimar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        TituloElimimar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TituloElimimar.setText("Eliminar Doc de la Cola");

        TituloElimimar1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        TituloElimimar1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TituloElimimar1.setText("Imprimir");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        BorrarDocCola.setText("Eliminar de la cola");
        BorrarDocCola.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BorrarDocColaMouseClicked(evt);
            }
        });

        BuscarUserButton.setText("Buscar Usuario");
        BuscarUserButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BuscarUserButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout ColaLayout = new javax.swing.GroupLayout(Cola);
        Cola.setLayout(ColaLayout);
        ColaLayout.setHorizontalGroup(
            ColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ColaLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(ColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TituloElimimar1, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(BotonImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(ColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ColaLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(ColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ColaLayout.createSequentialGroup()
                                .addComponent(Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(121, 121, 121))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ColaLayout.createSequentialGroup()
                                .addGroup(ColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(TituloElimimar, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DocList1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BuscarUser, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(60, 60, 60))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ColaLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ColaLayout.createSequentialGroup()
                                .addComponent(BorrarDocCola, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(115, 115, 115))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ColaLayout.createSequentialGroup()
                                .addComponent(Buscar1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(86, 86, 86))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ColaLayout.createSequentialGroup()
                                .addComponent(BuscarUserButton)
                                .addGap(139, 139, 139))))))
        );
        ColaLayout.setVerticalGroup(
            ColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ColaLayout.createSequentialGroup()
                .addGroup(ColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ColaLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(TituloElimimar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ColaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TituloElimimar1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(ColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ColaLayout.createSequentialGroup()
                        .addComponent(Buscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BuscarUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BuscarUserButton))
                    .addGroup(ColaLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(BotonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(Buscar1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DocList1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BorrarDocCola)
                .addGap(29, 29, 29))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ColaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1))
        );

        Tabs.addTab("Manejar Cola de Impresión", Cola);

        UserList4.setToolTipText("");
        UserList4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                UserList4FocusGained(evt);
            }
        });

        Buscar2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Buscar2.setText("Buscar Usuario");

        DocList2.setToolTipText("Documentos que NO han sido enviados aun a la cola");
        DocList2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                DocList2FocusGained(evt);
            }
        });

        Buscar3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Buscar3.setText("Buscar Documento");

        Mandar.setText("Mandar a la Cola");
        Mandar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MandarMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel2.setText("*Estos no han sido enviados aun a la cola");

        javax.swing.GroupLayout ManejarColaLayout = new javax.swing.GroupLayout(ManejarCola);
        ManejarCola.setLayout(ManejarColaLayout);
        ManejarColaLayout.setHorizontalGroup(
            ManejarColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManejarColaLayout.createSequentialGroup()
                .addGroup(ManejarColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ManejarColaLayout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addGroup(ManejarColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Buscar3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Buscar2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ManejarColaLayout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addGroup(ManejarColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Mandar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DocList2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UserList4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))))
                .addContainerGap(291, Short.MAX_VALUE))
        );
        ManejarColaLayout.setVerticalGroup(
            ManejarColaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManejarColaLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(Buscar2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserList4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(Buscar3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DocList2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(22, 22, 22)
                .addComponent(Mandar, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        Tabs.addTab("Agregar a la Cola", ManejarCola);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(CargarArchivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(Tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(9, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Names, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Proyect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(College, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(horas24, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(127, 127, 127))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Proyect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(College)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Names))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(horas24, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(21, 21, 21)
                            .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(Tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(CargarArchivo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarArchivoActionPerformed
        /**
         * Buscador de archivos
         * Accede todos los documentos del ordenador
         */
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        FileNameExtensionFilter imgFilter = new FileNameExtensionFilter("CSV Files", "csv");
        fileChooser.setFileFilter(imgFilter);

        int result = fileChooser.showOpenDialog(this);
        File fileName = fileChooser.getSelectedFile();
        BufferedReader reader = null;
        
        /**
         * Lector de archivos csv
         */
        try {          
            reader = new BufferedReader(new FileReader(fileName.getAbsolutePath()));
            String lineText;
            lineText = reader.readLine();
            while ((lineText = reader.readLine()) != null) {
                String parts[] = lineText.split(",");
                String username = parts[0];
                String priority = parts[1];
                User user = new User(username, priority);
                listOfUsers.add(user);
            }
            
            reader.close();
            UserList.requestFocus();
            UserList1.requestFocus();
            UserList2.requestFocus();
            UserList3.requestFocus();
            UserList4.requestFocus();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CargarArchivoActionPerformed

    private void UserList1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UserList1FocusGained
        /**
         * Accede a la lista de usuarios existentes por el ComboBox  
         */
        UserList1.removeAllItems();
        for (int i = 0; i <= listOfUsers.getSize()-1; i++) {
            UserList1.addItem(listOfUsers.get(i).getUsername());
        }
    }//GEN-LAST:event_UserList1FocusGained

    private void BorrarDocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BorrarDocMouseClicked
        /**
         * Accede a la lista de usuarios existentes por el ComboBox
         * Accede a la lista de documentos asociados a un usuario existentes por el ComboBox
         * Borra el documento asociado al usuario utiizando la lista de usuarios y de documentos y los nodos de estos
         */
        for (Nodo<User> NodoUser = listOfUsers.getHead() ; NodoUser != null; NodoUser = NodoUser.getNext()) {
            if (UserList.getSelectedItem().equals(NodoUser.getValue().getUsername())) {
                User user = NodoUser.getValue();
                for (Nodo<Document> NodoDocument = user.getDocuments().getHead() ; NodoDocument != null ; NodoDocument = NodoDocument.getNext()) {
                    if (NodoDocument.getValue().getName().equals(DocList.getSelectedItem())) {
                        user.getDocuments().remove(NodoDocument.getValue());
                        break;
                    }
                }
            }
        }
        JOptionPane.showMessageDialog(null, "Documento borrado del usuario");
        DocList.requestFocus();  
    }//GEN-LAST:event_BorrarDocMouseClicked

    private void UserListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UserListFocusGained
        /**
         * Accede a la lista de usuarios existentes por el ComboBox  
         */
        UserList.removeAllItems();
        for (int i = 0; i <= listOfUsers.getSize()-1; i++) {
            UserList.addItem(listOfUsers.get(i).getUsername());
        }
    }//GEN-LAST:event_UserListFocusGained

    private void BorrarUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BorrarUserMouseClicked
        /**
         * Accede a la lista de usuarios existentes por el ComboBox 
         * Borra el usuario utiizando la lista de usuarios y los nodos de dichos usuarios
         */
        for (Nodo<User> NodoUser = listOfUsers.getHead() ; NodoUser != null; NodoUser = NodoUser.getNext()) {
            if (UserList1.getSelectedItem().equals(NodoUser.getValue().getUsername())) {
                listOfUsers.remove(NodoUser.getValue());
                break;
            }
        }
        JOptionPane.showMessageDialog(null, "Usuario borrado:");
        UserList.requestFocus();
        UserList1.requestFocus();  
    }//GEN-LAST:event_BorrarUserMouseClicked

    private void DocListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_DocListFocusGained
        /**
         * Accede a la lista de documentos asociados a un usuario existentes por el ComboBox  
         */
        DocList.removeAllItems();
        for (Nodo<User> NodoUser = listOfUsers.getHead() ; NodoUser != null; NodoUser = NodoUser.getNext()){
            if (UserList.getSelectedItem().equals(NodoUser.getValue().getUsername())){
                for (int i = 0; i <= NodoUser.getValue().getDocuments().getSize() -1; i++) {
                    if (!NodoUser.getValue().getDocuments().get(i).isIsInPQ()) {
                        DocList.addItem(NodoUser.getValue().getDocuments().get(i).getName());
                    }    
                }
            }
        }
    }//GEN-LAST:event_DocListFocusGained

    private void UserList2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UserList2FocusGained
        /**
         * Accede a la lista de usuarios existentes por el ComboBox  
         */
        UserList2.removeAllItems();
        for (int i = 0; i <= listOfUsers.getSize()-1; i++) {
            UserList2.addItem(listOfUsers.get(i).getUsername());
        }
    }//GEN-LAST:event_UserList2FocusGained

    private void DocList1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_DocList1FocusGained
        /**
         * Accede a los documentos del usuario que estan en la cola de impresion
         */
        DocList1.removeAllItems();
        
        if (docListSended != null) {
            for (Nodo<Document> NodoDocument = docListSended.getHead(); NodoDocument != null ; NodoDocument = NodoDocument.getNext()) {
                if (NodoDocument.getValue().isIsInPQ() != false) {
                    DocList1.addItem(NodoDocument.getValue().getName());
                } else {
                    docListSended.remove(NodoDocument.getValue());
                }
            }
        }
        DocList1.requestFocus();
    }//GEN-LAST:event_DocList1FocusGained

    private void UserList4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UserList4FocusGained
        /**
         * Accede a la lista de usuarios existentes por el ComboBox 
         */
        UserList4.removeAllItems();
        for (int i = 0; i <= listOfUsers.getSize()-1; i++) {
            UserList4.addItem(listOfUsers.get(i).getUsername());
        }
    }//GEN-LAST:event_UserList4FocusGained

    private void DocList2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_DocList2FocusGained
        /**
         * Accede a la lista de documentos asociados a un usuario existentes por el ComboBox    
         */
        // TODO add your handling code here:
        DocList2.removeAllItems();
        for (Nodo<User> NodoUser = listOfUsers.getHead() ; NodoUser != null; NodoUser = NodoUser.getNext()){
            if (UserList4.getSelectedItem().equals(NodoUser.getValue().getUsername())){
                for (int i = 0; i <= NodoUser.getValue().getDocuments().getSize() -1; i++) {
                    if (!NodoUser.getValue().getDocuments().get(i).isIsInPQ()) {
                        DocList2.addItem(NodoUser.getValue().getDocuments().get(i).getName());
                    }
                }
            }
        }
    }//GEN-LAST:event_DocList2FocusGained

    private void BotonImprimirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonImprimirMouseClicked
       /**
        * Obtiene el documento con menor valor de tiempo de la cola de prioridad
        */
       // Valores auxiliares
        Document docPrinted = heap.extractMin();
        DefaultTableModel model = (DefaultTableModel) TablaCola.getModel();
        DateFormat obj = new SimpleDateFormat("HH:mm:ss"); 
        // Si el documento no es null, entonces actualiza la vista de la cola e imprime el documento.
        if (docPrinted != null) {
            if (heap.getCurrentHeapSize() > 0) {
                for (int i = 0; i <= heap.getCurrentHeapSize() - 1; i++) {
                    Document docPQ = heap.getHeapArray()[i];
                    model.setRowCount(0);
                    model.addRow(new Object[] {docPQ.getName(), docPQ.getDocument_type(), obj.format(new Date(docPQ.getTimeSendToPriorityQueue())), docPQ.getSize()});
                   }
            } else {
                model.setRowCount(0);
            }
        docPrinted.setIsInPQ(false);
        DocList2.requestFocus();
        JOptionPane.showMessageDialog(rootPane, "Se ha impreso el documento: " + docPrinted.getName() + " Formato: " + docPrinted.getDocument_type() + " Tamaño: " + docPrinted.getSize());
        } else {
            JOptionPane.showMessageDialog(rootPane, "No hay documentos en la cola");
        }
    }//GEN-LAST:event_BotonImprimirMouseClicked

    private void MandarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MandarMouseClicked
        // TODO add your handling code here:
        
        //Conseguir usuario y despues se accede a su lista de documentos no enviados a la cola
        for (Nodo<User> NodoUser = listOfUsers.getHead() ; NodoUser != null; NodoUser = NodoUser.getNext()){
            if (UserList4.getSelectedItem().equals(NodoUser.getValue().getUsername())){
                    User user = NodoUser.getValue();
                for (Nodo<Document> NodoDocumento = user.getDocuments().getHead(); NodoDocumento != null ; NodoDocumento = NodoDocumento.getNext()) {
                    if (NodoDocumento.getValue().getName().equals(DocList2.getSelectedItem())) {
                        Document documento = NodoDocumento.getValue();
                        // Revisar la prioridad del usuario y dependiendo de este, la etiqueta de tiempo se vera manipulada.
                        if (user.getType().equals("prioridad_alta")) {
                            documento.setTimeSendToPriorityQueue(System.currentTimeMillis() - 480000);
                        } else if (user.getType().equals("prioridad_media")) {
                            documento.setTimeSendToPriorityQueue(System.currentTimeMillis() - 240000);
                        } else {
                            documento.setTimeSendToPriorityQueue(System.currentTimeMillis());
                        }
                        // Insertar a la tabla de dispersion y a la cola de prioridad
                        documento.setIsInPQ(true);
                        heap.insert(documento);
                        hashTable.put(UserList4.getSelectedItem().toString(), documento);
                        
                        // Vista de la cola de prioridad
                        DefaultTableModel model = (DefaultTableModel) TablaCola.getModel();
                        DateFormat obj = new SimpleDateFormat("HH:mm:ss"); 
                        
                        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
                        sorter.setSortKeys(Collections.singletonList(
                            new RowSorter.SortKey(2, SortOrder.ASCENDING)));
                        TablaCola.setRowSorter(sorter);
                        model.setRowCount(0);
                        
                        for (int i = 0; i <= heap.getCurrentHeapSize() - 1; i++) {
                            Document docPQ = heap.getHeapArray()[i];
                            model.addRow(new Object[] {docPQ.getName(), docPQ.getDocument_type(), obj.format(new Date(docPQ.getTimeSendToPriorityQueue())), docPQ.getSize()});
                        }
                        sorter.sort();
                        sorter.setSortable(2, false);

                        JOptionPane.showMessageDialog(null, "Documento enviado a la cola de prioridad");
                        DocList.requestFocus();
                        DocList2.requestFocus();
                        
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_MandarMouseClicked

    private void AñadirDocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AñadirDocMouseClicked
        /**
         * Accede al ComboBox de usuarios para agregarle el documento
         * Accede al texto ingresado en el text field
         * Corre el código de CheckDocumento para ver si el documento es repetido
         * Añade el documento al usuario (si no está repetido)  
         */
        int check = 0;
        if ("".equals(AñadirNombreDoc.getText().trim())) {
            JOptionPane.showMessageDialog(null, "Ingrese Documento:");
            AñadirNombreDoc.requestFocus();
        } else {
            // Chequear si Existe Documento
            check = CheckDocumento(AñadirNombreDoc.getText().trim(), UserList2);
            if (check == 1) {
                JOptionPane.showMessageDialog(null, "El Documento Existe, Ingrese otro:");
                AñadirNombreDoc.requestFocus();
            } else {
                try {
                    int size = Integer.parseInt(Tamaño.getText().trim());
                    for (Nodo<User> NodoUser = listOfUsers.getHead() ; NodoUser != null; NodoUser = NodoUser.getNext()) {
                        if (UserList2.getSelectedItem().equals(NodoUser.getValue().getUsername())) {
                            NodoUser.getValue().getDocuments().add(new Document(AñadirNombreDoc.getText().trim(), TiposdeDoc.getSelectedItem().toString(), size));
                        }
                    }
                AñadirNombreDoc.setText("");
                Tamaño.setText("");
                JOptionPane.showMessageDialog(null, "Documento añadido al usuario:");    
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Ingrese un tamaño valido (e.g: 21)");
                }
            } 
        }
    }//GEN-LAST:event_AñadirDocMouseClicked

    private void AñadirUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AñadirUserMouseClicked
        /**
         * Accede al texto ingresado en el text field
         * Corre el código de CheckUsuario para ver si el usuario es repetido
         * Añade el usuario a la lista de usuarios (si no está repetido) 
         */
        int check = 0;
        if ("".equals(AñadirNombreUser.getText().trim())) {
            JOptionPane.showMessageDialog(null, "Ingrese Usuario:");
            AñadirNombreUser.requestFocus();
        } else {
            // Chequear si Existe Usuario
                check = CheckUsuario(AñadirNombreUser.getText());
                if (check == 1) {
                    JOptionPane.showMessageDialog(null, "El Usuario Existe, Ingrese otro nombre:");
                    AñadirNombreUser.requestFocus();
                } else {
                    listOfUsers.add(new User(AñadirNombreUser.getText(), (String) Prioridades.getSelectedItem()));
                    AñadirNombreUser.setText("");
                    JOptionPane.showMessageDialog(null, "Usuario añadido a la lista de usuarios:");
                } 
        }
    }//GEN-LAST:event_AñadirUserMouseClicked

    private void BorrarDocColaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BorrarDocColaMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) TablaCola.getModel();
        DateFormat obj = new SimpleDateFormat("HH:mm:ss"); 
        
        // Itera en la lista obtenida de la hashTable y cuando consigue el elemento que haga match con el escogido en el selector, lo elimina
        // de la lista de la hash Table y vuelve a rehacer la visualizacion del monticulo binario
        for (Nodo<Document> NodoDocumento = docListSended.getHead(); NodoDocumento != null ; NodoDocumento = NodoDocumento.getNext()) {
            if (NodoDocumento.getValue().getName().equals(DocList1.getSelectedItem())) {
                NodoDocumento.getValue().setTimeSendToPriorityQueue(0);
                Document docRemoved = heap.extractMin();
                docRemoved.setIsInPQ(false);
                docListSended.remove(docRemoved);
                JOptionPane.showMessageDialog(rootPane, "Se ha eliminado el documento: " + docRemoved.getName() + " Formato: " + docRemoved.getDocument_type() + " Tamaño: " + docRemoved.getSize());
                
                if (heap.getCurrentHeapSize() > 0) {
                for (int i = 0; i <= heap.getCurrentHeapSize() - 1; i++) {
                    Document docPQ = heap.getHeapArray()[i];
                    model.setRowCount(0);
                    model.addRow(new Object[] {docPQ.getName(), docPQ.getDocument_type(), obj.format(new Date(docPQ.getTimeSendToPriorityQueue())), docPQ.getSize()});
                   }
                } else {
                    model.setRowCount(0);
                }
                DocList1.requestFocus();
                break;
            }
        }
    }//GEN-LAST:event_BorrarDocColaMouseClicked

    private void BuscarUserButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BuscarUserButtonMouseClicked
        // TODO add your handling code here:
        String user = BuscarUser.getText().trim();
        DocList1.removeAllItems();
        docListSended = hashTable.get(user);
        
        // Prepopula el selector de documentos para el usuario buscado accedido a traves de la hash table 

        DocList1.requestFocus();
    }//GEN-LAST:event_BuscarUserButtonMouseClicked

    public static void main(String[] args) {
        
    
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AñadirDoc;
    private javax.swing.JTextField AñadirNombreDoc;
    private javax.swing.JTextField AñadirNombreUser;
    private javax.swing.JButton AñadirUser;
    private javax.swing.JButton BorrarDoc;
    private javax.swing.JButton BorrarDocCola;
    private javax.swing.JButton BorrarUser;
    private javax.swing.JButton BotonImprimir;
    private javax.swing.JLabel Buscar;
    private javax.swing.JLabel Buscar1;
    private javax.swing.JLabel Buscar2;
    private javax.swing.JLabel Buscar3;
    private javax.swing.JTextField BuscarUser;
    private javax.swing.JButton BuscarUserButton;
    private javax.swing.JButton CargarArchivo;
    private javax.swing.JPanel Cola;
    private javax.swing.JLabel College;
    private javax.swing.JComboBox<String> DocList;
    private javax.swing.JComboBox<String> DocList1;
    private javax.swing.JComboBox<String> DocList2;
    private javax.swing.JLabel Ejemplo;
    private javax.swing.JLabel Ejemplo1;
    private javax.swing.JLabel Ejemplo2;
    private javax.swing.JLabel Ejemplo3;
    private javax.swing.JLabel Ejemplo4;
    private javax.swing.JLabel Ejemplo5;
    private javax.swing.JButton Mandar;
    private javax.swing.JPanel ManejarCola;
    private javax.swing.JLabel Names;
    private javax.swing.JLabel NombreUser;
    private javax.swing.JLabel NombreUser1;
    private javax.swing.JLabel PaginasDoc;
    private javax.swing.JLabel Prioridad;
    private javax.swing.JComboBox<String> Prioridades;
    private javax.swing.JLabel Proyect;
    private javax.swing.JPanel TabAñadirDoc;
    private javax.swing.JPanel TabAñadirUser;
    private javax.swing.JPanel TabEliminar;
    private javax.swing.JPanel TabVer;
    private javax.swing.JTable TablaCola;
    private javax.swing.JTabbedPane Tabs;
    private javax.swing.JTextField Tamaño;
    private javax.swing.JLabel TipoDoc;
    private javax.swing.JComboBox<String> TiposdeDoc;
    private javax.swing.JLabel Titulo;
    private javax.swing.JLabel TituloElimimar;
    private javax.swing.JLabel TituloElimimar1;
    private javax.swing.JComboBox<String> UserList;
    private javax.swing.JComboBox<String> UserList1;
    private javax.swing.JComboBox<String> UserList2;
    private javax.swing.JComboBox<String> UserList4;
    private javax.swing.JLabel Users;
    private javax.swing.JLabel horas24;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Continuación reloj
     * Obtiene valores del calendario
     * Formato de 24 horas
     */
    @Override
    public void run() {
        while(true) {
            Calendar cal = Calendar.getInstance();
            hour = cal.get(Calendar.HOUR_OF_DAY);
            minute = cal.get(Calendar.MINUTE);
            second = cal.get(Calendar.SECOND);
            
            //24 horas
            SimpleDateFormat sdf24 = new SimpleDateFormat("HH:mm:ss");
            Date dat = cal.getTime();
            String time24 = sdf24.format(dat);
            horas24.setText(time24);
        }
    }
    
    /**
     * Código para chequear usuario existente
     * @param usuario String
     * @return si Usuario Existe
     */
    public int CheckUsuario(String usuario) {
            int check = 0;
            for (int i = 0; i <= listOfUsers.getSize() - 1; i++) {
                if (usuario.equals(listOfUsers.get(i).getUsername())) {
                    check = 1;
                    break;
                }
            }
            return check;
        } 
    
    /**
     * Código para chequear documento existente
     * @param documento String
     * @param usuario String
     * @param ComboBox javax.swing.JComboBox<String> 
     * @return si Documento Existe
     */
    public int CheckDocumento(String documento, javax.swing.JComboBox<String> combobox) {
            int check = 0;
            for (Nodo<User> NodoUser = listOfUsers.getHead() ; NodoUser != null; NodoUser = NodoUser.getNext()) {
                if (combobox.getSelectedItem().equals(NodoUser.getValue().getUsername())) {
                    for (Nodo<Document> NodoDocumento = NodoUser.getValue().getDocuments().getHead() ;  NodoDocumento != null ; NodoDocumento = NodoDocumento.getNext()) {
                        if (NodoDocumento.getValue().getName().equals(documento)) {
                        check = 1;
                        break;
                        }
                    }
                }
            }
            return check;
        } 
}
